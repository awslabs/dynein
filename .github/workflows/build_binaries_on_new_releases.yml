name: Build binaries on new releases
on:
  # the workflow starts on new release publised https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#release
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build_dynein_binary:
    runs-on: ${{ matrix.os }}
    env:
      RUST_LOG: debug # Output debug log
      RUST_BACKTRACE: 1 # Dump backtrace on panic
    strategy:
      fail-fast: false
      matrix:
        name: [linux, linux-arm, macos, macos-arm, windows]
        include:
        - name: linux
          os: ubuntu-latest
          target: x86_64-unknown-linux-musl
        - name: linux-arm
          os: ubuntu-latest
          target: arm-unknown-linux-gnueabihf
        - name: macos
          os: macos-13
          target: x86_64-apple-darwin
        - name: macos-arm
          os: macos-14
          target: aarch64-apple-darwin
        - name: windows
          os: windows-2022
          target: x86_64-pc-windows-msvc
    # We need `contents: write` to create a release as described in the `softprops/action-gh-release`.
    # https://github.com/softprops/action-gh-release?tab=readme-ov-file#permissions
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Install rust toolchain
      uses: dtolnay/rust-toolchain@aec8960fc037f3ba5dd7773fd5b938a0ab22c50f
      with:
        targets: ${{ matrix.target }}
    # cargo build on each OS generates a binary named "dy" under ./target/release/ directory.
    - run: cargo build --verbose --release

    - name: Strip the binary to reduce its size (linux and macos)
      if: matrix.name == 'linux' || matrix.name == 'macos' || matrix.name == 'macos-arm'
      run: strip ./target/release/dy
    - name: Archive the binary for publishing on release assets
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-2022" ]; then
          7z a -tzip dynein-${{ matrix.name }}.zip ./target/release/dy.exe
        else
          tar -C ./target/release/ -cvzf dynein-${{ matrix.name }}.tar.gz dy
        fi
    - name: Generate SHA256 checksum
      if: matrix.name != 'windows'
      run: |
        if [ "${{ matrix.os }}" = "macos-13" ] || [ "${{ matrix.os }}" = "macos-14" ]; then
          shasum -a 256 dynein-${{ matrix.name }}.tar.gz > dynein-${{ matrix.name }}.tar.gz.sha256
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          sha256sum dynein-${{ matrix.name }}.tar.gz > dynein-${{ matrix.name }}.tar.gz.sha256
        else
          echo "matrix.os: ${{ matrix.os }} is not handled."
        fi
    - name: Generate SHA256 checksum for windows
      if: matrix.name == 'windows'
      run: |
        Get-FileHash -Path dynein-${{ matrix.name }}.zip -Algorithm SHA256 | ForEach-Object { "{0}  {1}" -f $_.Hash.ToLower(), (($_.path | Resolve-Path -Relative) -replace '^\.\\' , '') } > dynein-${{ matrix.name }}.zip.sha256

    - name: Display current files (linux, linux-arm, macos, and macos-arm)
      if: matrix.name == 'linux' || matrix.name == 'linux-arm' || matrix.name == 'macos' || matrix.name == 'macos-arm'
      run: ls -lrt && ls -lrt ./target/ && ls -lrt ./target/release/

    - name: Display current files (windows)
      if: matrix.name == 'windows'
      run: Get-ChildItem | Sort-Object LastWriteTime ; Get-ChildItem ./target/ | Sort-Object LastWriteTime ; Get-ChildItem ./target/release/ | Sort-Object LastWriteTime

    - name: Create a release with the binary file
      uses: softprops/action-gh-release@9d7c94cfd0a1f3ed45544c887983e9fa900f0564 # Pin the commit hash of v2.0.4
      # this uploading step to the release asseets works only when the target ref has tagged starts with "v" https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
      if: startsWith( github.ref, 'refs/tags/v' )
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: dynein-*
